<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.xuli.toe.dao.IOrderDao">
    <resultMap id="OrderMap" type="team.xuli.toe.domain.Order" autoMapping="true">
        <id column="orderId" property="orderId"/>
        <association property="orgAddress" javaType="team.xuli.toe.domain.Address">
            <id property="addressId" column="orgAddressId"/>
            <result property="calledName" column="orgCalledName"/>
            <result property="phoneNo" column="orgPhoneNo"/>
            <result property="addressDesc" column="orgAddressDesc"/>
            <result property="longitude" column="orgLongitude"/>
            <result property="latitude" column="orgLatitude"/>
       </association>
        <association property="destAddress" javaType="team.xuli.toe.domain.Address">
            <id property="addressId" column="destAddressId"/>
            <result property="calledName" column="destCalledName"/>
            <result property="phoneNo" column="destPhoneNo"/>
            <result property="addressDesc" column="destAddressDesc"/>
            <result property="longitude" column="destLongitude"/>
            <result property="latitude" column="destLatitude"/>
        </association>
    </resultMap>
    <insert id="insert" parameterType="team.xuli.toe.domain.Order" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO `order`
        (`ownerId`,
         `carrierId`,
         `orgAddressId`,
         `destAddressId`,
         `description`,
         `itemTypeId`,
         `weight`,
         `distance`,
         `payment`,
         `status`,
         `createTime`,
         `deadLine`,
         `assignTime`,
         `endTime`)
         VALUES
         (#{ownerId},
         #{carrierId},
         #{orgAddressId},
         #{destAddressId},
         #{description},
         #{itemTypeId},
         #{weight},
         #{distance},
         #{payment},
         #{status},
         #{createTime},
         #{deadLine},
         #{assignTime},
         #{endTime});
    </insert>
    <update id="update" parameterType="team.xuli.toe.domain.Order">
        UPDATE `order`
        SET
        <if test="carrierId > 0">`carrierId` = #{carrierId},</if>
        <if test="orgAddressId > 0">`orgAddressId` = #{orgAddressId},</if>
        <if test="destAddressId > 0">`destAddressId` = #{destAddressId},</if>
        <if test="itemTypeId > 0">`itemTypeId` = #{itemTypeId},</if>
        <if test="weight > 0">`weight` = #{weight},</if>
        <if test="distance > 0">`distance` = #{distance},</if>
        <if test="description != null">`description` = #{description},</if>
        <if test="payment > 0">`payment` = #{payment},</if>
        <if test="status >= 0">`status` = #{status},</if>
        <if test="createTime != null">`createTime` = #{createTime},</if>
        <if test="deadLine != null">`deadLine` = #{deadLine},</if>
        <if test="assignTime != null">`assignTime` = #{assignTime},</if>
        <if test="endTime != null">`endTime` = #{endTime},</if>
        `orderId` = #{orderId}
        WHERE `orderId` = #{orderId};
    </update>

    <select id="get" resultType="team.xuli.toe.domain.Order">
        SELECT
        `order`.`orderId`,
        `order`.`ownerId`,
        `order`.`carrierId`,
        `order`.`orgAddressId`,
        `order`.`destAddressId`,
        `order`.`description`,
        `order`.`itemTypeId`,
        `order`.`weight`,
        `order`.`distance`,
        `order`.`payment`,
        `order`.`status`,
        `order`.`createTime`,
        `order`.`deadLine`,
        `order`.`assignTime`,
        `order`.`endTime`
        FROM `order`
        WHERE orderId = #{orderId};
    </select>

    <select id="getQualifiedOrders" resultMap="OrderMap">
        SELECT
        `order`.`orderId`,
        `order`.`ownerId`,
        `order`.`carrierId`,
        `order`.`orgAddressId`,
        `order`.`destAddressId`,
        `order`.`description`,
        `order`.`itemTypeId`,
        `order`.`weight`,
        `order`.`distance`,
        `order`.`payment`,
        `order`.`status`,
        `order`.`createTime`,
        `order`.`deadLine`,
        `order`.`assignTime`,
        `order`.`endTime`,
        org.`addressid` AS orgAddressId,
        org.`calledName` AS orgCalledName,
        org.`phoneNo` AS orgPhoneNo,
        org.`addressDesc` AS orgAddressDesc,
        org.`longitude` AS orgLongitude,
        org.`latitude` AS orgLatitude,
        dest.`addressid` AS destAddressId,
        dest.`calledName` AS destCalledName,
        dest.`phoneNo` AS destPhoneNo,
        dest.`addressDesc` AS destAddressDesc,
        dest.`longitude` AS destLongitude,
        dest.`latitude` AS destLatitude
        FROM `order`
        LEFT JOIN `address` AS org ON `order`.`orgAddressId` = org.`addressId`
        LEFT JOIN `address` AS dest ON `order`.`destAddressId` = dest.`addressId`
        WHERE
        <if test="ownerId > 0">`ownerId` = #{ownerId} AND</if>
        <if test="carrierId > 0">`carrierId` = #{carrierId} AND</if>
        <if test="status >= 0">`order`.`status` = #{status} AND </if>
        orderId > 0
        ORDER BY status ASC,orderId DESC
        LIMIT #{startPos},#{count};
    </select>

    <select id="getQualifiedOrdersCount" resultType="int">
        SELECT  COUNT(*)
        FROM `order`
        WHERE
        <if test="ownerId > 0">ownerId = #{ownerId} AND</if>
        <if test="carrierId > 0">carrierId = #{carrierId} AND</if>
        <if test="status >= 0">status = #{status} AND </if>
        orderId > 0;
    </select>
</mapper>

